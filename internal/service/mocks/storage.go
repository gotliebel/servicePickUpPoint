// Code generated by MockGen. DO NOT EDIT.
// Source: ./storage.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	model "homework-1/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// Mockstorage is a mock of storage interface.
type Mockstorage struct {
	ctrl     *gomock.Controller
	recorder *MockstorageMockRecorder
}

// MockstorageMockRecorder is the mock recorder for Mockstorage.
type MockstorageMockRecorder struct {
	mock *Mockstorage
}

// NewMockstorage creates a new mock instance.
func NewMockstorage(ctrl *gomock.Controller) *Mockstorage {
	mock := &Mockstorage{ctrl: ctrl}
	mock.recorder = &MockstorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstorage) EXPECT() *MockstorageMockRecorder {
	return m.recorder
}

// BeginTransaction mocks base method.
func (m *Mockstorage) BeginTransaction() (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction")
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockstorageMockRecorder) BeginTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*Mockstorage)(nil).BeginTransaction))
}

// GetFilteredOrdersByClientId mocks base method.
func (m *Mockstorage) GetFilteredOrdersByClientId(ctx context.Context, id uint64, limit int) ([]*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilteredOrdersByClientId", ctx, id, limit)
	ret0, _ := ret[0].([]*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilteredOrdersByClientId indicates an expected call of GetFilteredOrdersByClientId.
func (mr *MockstorageMockRecorder) GetFilteredOrdersByClientId(ctx, id, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilteredOrdersByClientId", reflect.TypeOf((*Mockstorage)(nil).GetFilteredOrdersByClientId), ctx, id, limit)
}

// GetOrder mocks base method.
func (m *Mockstorage) GetOrder(ctx context.Context, orderId uint64) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", ctx, orderId)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockstorageMockRecorder) GetOrder(ctx, orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*Mockstorage)(nil).GetOrder), ctx, orderId)
}

// GetOrdersByIdList mocks base method.
func (m *Mockstorage) GetOrdersByIdList(ctx context.Context, idList []uint64, tx *sql.Tx) ([]*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByIdList", ctx, idList, tx)
	ret0, _ := ret[0].([]*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByIdList indicates an expected call of GetOrdersByIdList.
func (mr *MockstorageMockRecorder) GetOrdersByIdList(ctx, idList, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByIdList", reflect.TypeOf((*Mockstorage)(nil).GetOrdersByIdList), ctx, idList, tx)
}

// GetTakebackList mocks base method.
func (m *Mockstorage) GetTakebackList(ctx context.Context, pageNumber int) ([]*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTakebackList", ctx, pageNumber)
	ret0, _ := ret[0].([]*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTakebackList indicates an expected call of GetTakebackList.
func (mr *MockstorageMockRecorder) GetTakebackList(ctx, pageNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTakebackList", reflect.TypeOf((*Mockstorage)(nil).GetTakebackList), ctx, pageNumber)
}

// MakeTransaction mocks base method.
func (m *Mockstorage) MakeTransaction(fn func(*sql.Tx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeTransaction", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeTransaction indicates an expected call of MakeTransaction.
func (mr *MockstorageMockRecorder) MakeTransaction(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeTransaction", reflect.TypeOf((*Mockstorage)(nil).MakeTransaction), fn)
}

// UpdateOrdersList mocks base method.
func (m *Mockstorage) UpdateOrdersList(ctx context.Context, list []*model.Order, tx *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrdersList", ctx, list, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrdersList indicates an expected call of UpdateOrdersList.
func (mr *MockstorageMockRecorder) UpdateOrdersList(ctx, list, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrdersList", reflect.TypeOf((*Mockstorage)(nil).UpdateOrdersList), ctx, list, tx)
}

// WriteOrderWithUniqueId mocks base method.
func (m_2 *Mockstorage) WriteOrderWithUniqueId(ctx context.Context, m *model.Order) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "WriteOrderWithUniqueId", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteOrderWithUniqueId indicates an expected call of WriteOrderWithUniqueId.
func (mr *MockstorageMockRecorder) WriteOrderWithUniqueId(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteOrderWithUniqueId", reflect.TypeOf((*Mockstorage)(nil).WriteOrderWithUniqueId), ctx, m)
}
