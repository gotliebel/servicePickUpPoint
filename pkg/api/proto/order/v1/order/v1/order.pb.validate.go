// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: order/v1/order.proto

package order

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on OrderRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderRequestMultiError, or
// nil if none found.
func (m *OrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for ClientId

	// no validation rules for StoredUntil

	// no validation rules for Weight

	// no validation rules for Price

	if m.Pack != nil {
		// no validation rules for Pack
	}

	if len(errors) > 0 {
		return OrderRequestMultiError(errors)
	}

	return nil
}

// OrderRequestMultiError is an error wrapping multiple validation errors
// returned by OrderRequest.ValidateAll() if the designated constraints aren't met.
type OrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderRequestMultiError) AllErrors() []error { return m }

// OrderRequestValidationError is the validation error returned by
// OrderRequest.Validate if the designated constraints aren't met.
type OrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderRequestValidationError) ErrorName() string { return "OrderRequestValidationError" }

// Error satisfies the builtin error interface
func (e OrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderRequestValidationError{}

// Validate checks the field values on CourierRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CourierRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CourierRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CourierRequestMultiError,
// or nil if none found.
func (m *CourierRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CourierRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	if len(errors) > 0 {
		return CourierRequestMultiError(errors)
	}

	return nil
}

// CourierRequestMultiError is an error wrapping multiple validation errors
// returned by CourierRequest.ValidateAll() if the designated constraints
// aren't met.
type CourierRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourierRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourierRequestMultiError) AllErrors() []error { return m }

// CourierRequestValidationError is the validation error returned by
// CourierRequest.Validate if the designated constraints aren't met.
type CourierRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourierRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourierRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourierRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourierRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourierRequestValidationError) ErrorName() string { return "CourierRequestValidationError" }

// Error satisfies the builtin error interface
func (e CourierRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourierRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourierRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourierRequestValidationError{}

// Validate checks the field values on ClientRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClientRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClientRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClientRequestMultiError, or
// nil if none found.
func (m *ClientRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ClientRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrdersId

	if len(errors) > 0 {
		return ClientRequestMultiError(errors)
	}

	return nil
}

// ClientRequestMultiError is an error wrapping multiple validation errors
// returned by ClientRequest.ValidateAll() if the designated constraints
// aren't met.
type ClientRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClientRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClientRequestMultiError) AllErrors() []error { return m }

// ClientRequestValidationError is the validation error returned by
// ClientRequest.Validate if the designated constraints aren't met.
type ClientRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientRequestValidationError) ErrorName() string { return "ClientRequestValidationError" }

// Error satisfies the builtin error interface
func (e ClientRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClientRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientRequestValidationError{}

// Validate checks the field values on ClientIdRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ClientIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClientIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClientIdRequestMultiError, or nil if none found.
func (m *ClientIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ClientIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	// no validation rules for Limit

	if len(errors) > 0 {
		return ClientIdRequestMultiError(errors)
	}

	return nil
}

// ClientIdRequestMultiError is an error wrapping multiple validation errors
// returned by ClientIdRequest.ValidateAll() if the designated constraints
// aren't met.
type ClientIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClientIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClientIdRequestMultiError) AllErrors() []error { return m }

// ClientIdRequestValidationError is the validation error returned by
// ClientIdRequest.Validate if the designated constraints aren't met.
type ClientIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientIdRequestValidationError) ErrorName() string { return "ClientIdRequestValidationError" }

// Error satisfies the builtin error interface
func (e ClientIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClientIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientIdRequestValidationError{}

// Validate checks the field values on ShortOrderRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ShortOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShortOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShortOrderRequestMultiError, or nil if none found.
func (m *ShortOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ShortOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for ClientId

	if len(errors) > 0 {
		return ShortOrderRequestMultiError(errors)
	}

	return nil
}

// ShortOrderRequestMultiError is an error wrapping multiple validation errors
// returned by ShortOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type ShortOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShortOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShortOrderRequestMultiError) AllErrors() []error { return m }

// ShortOrderRequestValidationError is the validation error returned by
// ShortOrderRequest.Validate if the designated constraints aren't met.
type ShortOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShortOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShortOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShortOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShortOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShortOrderRequestValidationError) ErrorName() string {
	return "ShortOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ShortOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShortOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShortOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShortOrderRequestValidationError{}

// Validate checks the field values on TakebacksRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TakebacksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TakebacksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TakebacksRequestMultiError, or nil if none found.
func (m *TakebacksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TakebacksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	if len(errors) > 0 {
		return TakebacksRequestMultiError(errors)
	}

	return nil
}

// TakebacksRequestMultiError is an error wrapping multiple validation errors
// returned by TakebacksRequest.ValidateAll() if the designated constraints
// aren't met.
type TakebacksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TakebacksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TakebacksRequestMultiError) AllErrors() []error { return m }

// TakebacksRequestValidationError is the validation error returned by
// TakebacksRequest.Validate if the designated constraints aren't met.
type TakebacksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TakebacksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TakebacksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TakebacksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TakebacksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TakebacksRequestValidationError) ErrorName() string { return "TakebacksRequestValidationError" }

// Error satisfies the builtin error interface
func (e TakebacksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTakebacksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TakebacksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TakebacksRequestValidationError{}

// Validate checks the field values on ListResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListResponseMultiError, or
// nil if none found.
func (m *ListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListResponseMultiError(errors)
	}

	return nil
}

// ListResponseMultiError is an error wrapping multiple validation errors
// returned by ListResponse.ValidateAll() if the designated constraints aren't met.
type ListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListResponseMultiError) AllErrors() []error { return m }

// ListResponseValidationError is the validation error returned by
// ListResponse.Validate if the designated constraints aren't met.
type ListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListResponseValidationError) ErrorName() string { return "ListResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListResponseValidationError{}
